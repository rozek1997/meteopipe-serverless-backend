AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation template for provisioning api for meteopipe app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    Runtime: python3.8

Parameters:
  AppName:
    Type: String
    Default: MeteoPipe
  Region:
    Type: String
    Default: eu-central-1

Resources:
  RegisterDeviceFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: device/
      Handler: register_device.lambda_handler
      Layers:
        - arn:aws:lambda:eu-central-1:045341403599:layer:MeteoPipeLibLambdaLayer:21
      Role: !GetAtt MeteoPipeManagingDeviceRole.Arn
      Environment:
        Variables:
          DEVICE_TABLE:
            Fn::ImportValue:
              !Sub "${AppName}-DeviceTable"
      Events:
        RegisterDevice:
          Type: HttpApi
          Properties:
            ApiId: !Ref MeteoPipeApi
            Method: POST
            Path: /devices

  DeleteDeviceFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: device/
      Handler: remove_device.lambda_handler
      Layers:
        - arn:aws:lambda:eu-central-1:045341403599:layer:MeteoPipeLibLambdaLayer:21
      Role: !GetAtt MeteoPipeManagingDeviceRole.Arn
      Events:
        RegisterDevice:
          Type: HttpApi
          Properties:
            ApiId: !Ref MeteoPipeApi
            Method: DELETE
            Path: /devices
      Environment:
        Variables:
          DEVICE_TABLE:
            Fn::ImportValue:
              !Sub "${AppName}-DeviceTable"

  ListUserDeviceFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: device/
      Handler: list_user_devices.lambda_handler
      Layers:
        - arn:aws:lambda:eu-central-1:045341403599:layer:MeteoPipeLibLambdaLayer:21
      Role: !GetAtt MeteoPipeManagingDeviceRole.Arn
      Events:
        RegisterDevice:
          Type: HttpApi
          Properties:
            ApiId: !Ref MeteoPipeApi
            Method: GET
            Path: /devices

  DeviceStatusFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: status/
      Handler: device_status.lambda_handler
      Layers:
        - arn:aws:lambda:eu-central-1:045341403599:layer:MeteoPipeLibLambdaLayer:21
      Role: !GetAtt MeteoPipeManagingDeviceRole.Arn
      Environment:
        Variables:
          DEVICE_STATUS_TABLE:
            Fn::ImportValue:
              !Sub "${AppName}-DeviceStatusTable"
      Events:
        RegisterDevice:
          Type: HttpApi
          Properties:
            ApiId: !Ref MeteoPipeApi
            Method: GET
            Path: /devices/status

  MeteoPipeManagingDeviceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role for allowing managed IoT devices
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: MeteoPipeManageDeviceRole
      Tags:
        - Key: "used-for"
          Value: "meteo-pipe lambda"

  MeteoPipeApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: Test
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_dmnlpIx6M
              audience:
                - 2vjt1p8l6rrf7nopj968188fe7
            IdentitySource: '$request.header.Authorization'

#  MeteoPipeAPICognitoAuthorizer:
#    Type: AWS::ApiGatewayV2::Authorizer
#    Properties:
#      ApiId: !Ref MeteoPipeApi
#      AuthorizerType: JWT
#      IdentitySource:
#        - '$request.header.Authorization'
#      JwtConfiguration:
#        Audience:
#          - 2vjt1p8l6rrf7nopj968188fe7
#        Issuer:
#      Name: meteopipe-cognito-authorizer