AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template for MeteoPipe app auth flow using cognito

Globals:
  Function:
    Timeout: 3
    Runtime: python3.8
    Environment:
      Variables:
        REGION: eu-central-1

Parameters: #section for defining variables which i will referred later on inside this template
  AppName:
    Type: String
    Default: MeteoPipe
  IoTParentGroupName:
    Type: String
    Default: MeteoPipeDevices

Resources:
  MeteoPipeStepFunctionInvoker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: postregistration/
      Handler: execute_stepfunction.lambda_handler
      Layers:
        - Fn::ImportValue:
            !Sub "${AppName}-LibLambdaLayer" #need to use layer versioning enforce by AWS
      Role:
        Fn::ImportValue: !Sub "${AppName}-StepFunctionExecRole"
      Environment:
        Variables:
          STEP_FUNCTION_ARN: !GetAtt MeteoPipePostRegistrationStepFunction.Arn

  MeteoPipeRegisterUserInDynamoDB:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: postregistration/
      Handler: register_user_DynamoDB.lambda_handler
      Layers:
        - Fn::ImportValue:
            !Sub "${AppName}-LibLambdaLayer" #need to use layer versioning enforce by AWS
      Role:
        Fn::ImportValue: !Sub "${AppName}-DynamoDBRole"
      Environment:
        Variables:
          TABLE_NAME: MeteoPipeUsers

  MeteoPipeCreateUserThingsGroup:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: postregistration/
      Handler: create_things_group.lambda_handler
      Layers:
        - Fn::ImportValue:
            !Sub "${AppName}-LibLambdaLayer" #need to use layer versioning enforce by AWS
      Role:
        Fn::ImportValue: !Sub "${AppName}-AWSIoTCoreRole"
      Environment:
        Variables:
          IoTParentGroupName: !Sub "${IoTParentGroupName}"

  MeteoPipePostRegistrationStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub
        - |-
          {
            "Comment": "State Machine for provisioning new user in MeteoPipe app",
            "StartAt": "RegisterUserInDynamoDB",
            "States": {
              "RegisterUserInDynamoDB": {
                "Type": "Task",
                "Resource": "${MeteoPipeRegistserUserInDynamoDB}",
                "InputPath": "$",
                "ResultPath": "$",
                "Next": "CreateNewThingGroupForTheUserInAWSIoTCore"
              },
              "CreateNewThingGroupForTheUserInAWSIoTCore": {
                "Type": "Task",
                "Resource": "${MeteoPipeCreateUserThingsGroup}",
                "InputPath": "$",
                "End": true
              }
            }
          }
        - MeteoPipeRegistserUserInDynamoDB: !GetAtt MeteoPipeRegisterUserInDynamoDB.Arn
          MeteoPipeCreateUserThingsGroup: !GetAtt MeteoPipeCreateUserThingsGroup.Arn
      RoleArn:
        Fn::ImportValue:
          !Sub "${AppName}-StepFunctionLambdaInvokerRole"


